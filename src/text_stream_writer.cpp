#include "text_stream_writer.h"

#include "writers/bom_stream_writer.h"
#include "writers/mapped_stream_writer.h"
#include "writers/utf8_stream_writer.h"
#include "writers/utf16le_stream_writer.h"
#include "writers/utf16be_stream_writer.h"
#include "writers/utf32le_stream_writer.h"
#include "writers/utf32be_stream_writer.h"
#include "byte_order_mark.h"
#include <stdexcept>
#include <unordered_map>

namespace
{
    extern const std::unordered_map<int32_t, char32_t> MAPPING_CP_437;
    extern const std::unordered_map<int32_t, char32_t> MAPPING_CP_850;
    extern const std::unordered_map<int32_t, char32_t> MAPPING_CP_1252;
    extern const std::unordered_map<int32_t, char32_t> MAPPED_ISO_8859_15;
}

std::unique_ptr<TextStreamWriter> TextStreamWriter::open(std::ostream& out, Charset cs, LineEnding nl)
{
    std::unique_ptr<TextStreamWriter> writer;
    switch (cs)
    {
    case Charset::CP_437:
        writer.reset(new MappedStreamWriter(out, MAPPING_CP_437, nl));
        break;
    case Charset::CP_850:
        writer.reset(new MappedStreamWriter(out, MAPPING_CP_850, nl));
        break;
    case Charset::CP_1252:
        writer.reset(new MappedStreamWriter(out, MAPPING_CP_1252, nl));
        break;
    case Charset::ISO_8859_15:
        writer.reset(new MappedStreamWriter(out, MAPPED_ISO_8859_15, nl));
        break;
    case Charset::UTF_8:
        writer.reset(new Utf8StreamWriter(out, nl));
        break;
    case Charset::UTF_16_LE:
        writer.reset(new Utf16LeStreamWriter(out, nl));
        break;
    case Charset::UTF_16_BE:
        writer.reset(new Utf16BeStreamWriter(out, nl));
        break;
    case Charset::UTF_32_LE:
        writer.reset(new Utf32LeStreamWriter(out, nl));
        break;
    case Charset::UTF_32_BE:
        writer.reset(new Utf32BeStreamWriter(out, nl));
        break;
    case Charset::UTF_8_BOM:
        writer.reset(new BomStreamWriter<Utf8StreamWriter, 3>(out, nl, ByteOrderMark::BOM_UTF8));
        break;
    case Charset::UTF_16_LE_BOM:
        writer.reset(new BomStreamWriter<Utf16LeStreamWriter, 2>(out, nl, ByteOrderMark::BOM_UTF16_LE));
        break;
    case Charset::UTF_16_BE_BOM:
        writer.reset(new BomStreamWriter<Utf16BeStreamWriter, 2>(out, nl, ByteOrderMark::BOM_UTF16_BE));
        break;
    case Charset::UTF_32_LE_BOM:
        writer.reset(new BomStreamWriter<Utf32LeStreamWriter, 4>(out, nl, ByteOrderMark::BOM_UTF32_LE));
        break;
    case Charset::UTF_32_BE_BOM:
        writer.reset(new BomStreamWriter<Utf32BeStreamWriter, 4>(out, nl, ByteOrderMark::BOM_UTF32_BE));
        break;
    default:
        throw std::invalid_argument("Unknown character encoding");
    }
    return writer;
}

TextStreamWriter::TextStreamWriter(LineEnding nl) noexcept : nl_(nl)
{
}

void TextStreamWriter::write(char32_t c)
{
    if (c >= 0xD800 && c < 0xDFFF)
    {
        // 0xD800 to 0xDFFF not assigned in Unicode. They are reserved to encode UTF-16
        throw std::ios::failure("Invalid codepoint");
    }

    if (c > 0x10FFFF)
    {
        // Unicode ends at 0x10FFFF as larger values cannot be encoded in UTF-16.
        throw std::ios::failure("Invalid codepoint");
    }

    put(c);
}

void TextStreamWriter::write(const std::u32string& out)
{
    for (char32_t c : out)
    {
        write(c);
    }
}

void TextStreamWriter::write_line(const std::u32string& out)
{
    write(out);
    switch (nl_)
    {
    case LineEnding::DOS:
        write('\r');
        write('\n');
        break;
    case LineEnding::MAC:
        write('\r');
        break;
    case LineEnding::UNIX:
        write('\n');
        break;
    }
}

namespace
{
    const std::unordered_map<int32_t, char32_t> MAPPING_CP_437 =
    {
                                                                                                                        {0x2302, 0x7F},
        {0x00C7, 0x80}, {0x00FC, 0x81}, {0x00E9, 0x82}, {0x00E2, 0x83}, {0x00E4, 0x84}, {0x00E0, 0x85}, {0x00E5, 0x86}, {0x00E7, 0x87},
        {0x00EA, 0x88}, {0x00EB, 0x89}, {0x00E8, 0x8A}, {0x00EF, 0x8B}, {0x00EE, 0x8C}, {0x00EC, 0x8D}, {0x00C4, 0x8E}, {0x00C5, 0x8F},
        {0x00C9, 0x90}, {0x00E6, 0x91}, {0x00C6, 0x92}, {0x00F4, 0x93}, {0x00F6, 0x94}, {0x00F2, 0x95}, {0x00FB, 0x96}, {0x00F9, 0x97},
        {0x00FF, 0x98}, {0x00D6, 0x99}, {0x00DC, 0x9A}, {0x00A2, 0x9B}, {0x00A3, 0x9C}, {0x00A5, 0x9D}, {0x20A7, 0x9E}, {0x0192, 0x9F},
        {0x00E1, 0xA0}, {0x00ED, 0xA1}, {0x00F3, 0xA2}, {0x00FA, 0xA3}, {0x00F1, 0xA4}, {0x00D1, 0xA5}, {0x00AA, 0xA6}, {0x00BA, 0xA7},
        {0x00BF, 0xA8}, {0x2310, 0xA9}, {0x00AC, 0xAA}, {0x00BD, 0xAB}, {0x00BC, 0xAC}, {0x00A1, 0xAD}, {0x00AB, 0xAE}, {0x00BB, 0xAF},
        {0x2591, 0xB0}, {0x2592, 0xB1}, {0x2593, 0xB2}, {0x2502, 0xB3}, {0x2524, 0xB4}, {0x2561, 0xB5}, {0x2562, 0xB6}, {0x2556, 0xB7},
        {0x2555, 0xB8}, {0x2563, 0xB9}, {0x2551, 0xBA}, {0x2557, 0xBB}, {0x255D, 0xBC}, {0x255C, 0xBD}, {0x255B, 0xBE}, {0x2510, 0xBF},
        {0x2514, 0xC0}, {0x2534, 0xC1}, {0x252C, 0xC2}, {0x251C, 0xC3}, {0x2500, 0xC4}, {0x253C, 0xC5}, {0x255E, 0xC6}, {0x255F, 0xC7},
        {0x255A, 0xC8}, {0x2554, 0xC9}, {0x2569, 0xCA}, {0x2566, 0xCB}, {0x2560, 0xCC}, {0x2550, 0xCD}, {0x256C, 0xCE}, {0x2567, 0xCF},
        {0x2568, 0xD0}, {0x2564, 0xD1}, {0x2565, 0xD2}, {0x2559, 0xD3}, {0x2558, 0xD4}, {0x2552, 0xD5}, {0x2553, 0xD6}, {0x256B, 0xD7},
        {0x256A, 0xD8}, {0x2518, 0xD9}, {0x250C, 0xDA}, {0x2588, 0xDB}, {0x2584, 0xDC}, {0x258C, 0xDD}, {0x2590, 0xDE}, {0x2580, 0xDF},
        {0x03B1, 0xE0}, {0x00DF, 0xE1}, {0x0393, 0xE2}, {0x03C0, 0xE3}, {0x03A3, 0xE4}, {0x03C3, 0xE5}, {0x00B5, 0xE6}, {0x03C4, 0xE7},
        {0x03A6, 0xE8}, {0x0398, 0xE9}, {0x03A9, 0xEA}, {0x03B4, 0xEB}, {0x221E, 0xEC}, {0x03C6, 0xED}, {0x03B5, 0xEE}, {0x2229, 0xEF},
        {0x2261, 0xF0}, {0x00B1, 0xF1}, {0x2265, 0xF2}, {0x2264, 0xF3}, {0x2320, 0xF4}, {0x2321, 0xF5}, {0x00F7, 0xF6}, {0x2248, 0xF7},
        {0x00B0, 0xF8}, {0x2219, 0xF9}, {0x00B7, 0xFA}, {0x221A, 0xFB}, {0x207F, 0xFC}, {0x00B2, 0xFD}, {0x25A0, 0xFE}, {0x00A0, 0xFF}
    };

    const std::unordered_map<int32_t, char32_t> MAPPING_CP_850 =
    {
        {0x2302, 0x7F},
        {0x00C7, 0x80}, {0x00FC, 0x81}, {0x00E9, 0x82}, {0x00E2, 0x83}, {0x00E4, 0x84}, {0x00E0, 0x85}, {0x00E5, 0x86}, {0x00E7, 0x87},
        {0x00EA, 0x88}, {0x00EB, 0x89}, {0x00E8, 0x8A}, {0x00EF, 0x8B}, {0x00EE, 0x8C}, {0x00EC, 0x8D}, {0x00C4, 0x8E}, {0x00C5, 0x8F},
        {0x00C9, 0x90}, {0x00E6, 0x91}, {0x00C6, 0x92}, {0x00F4, 0x93}, {0x00F6, 0x94}, {0x00F2, 0x95}, {0x00FB, 0x96}, {0x00F9, 0x97},
        {0x00FF, 0x98}, {0x00D6, 0x99}, {0x00DC, 0x9A}, {0x00F8, 0x9B}, {0x00A3, 0x9C}, {0x00D8, 0x9D}, {0x00D7, 0x9E}, {0x0192, 0x9F},
        {0x00E1, 0xA0}, {0x00ED, 0xA1}, {0x00F3, 0xA2}, {0x00FA, 0xA3}, {0x00F1, 0xA4}, {0x00D1, 0xA5}, {0x00AA, 0xA6}, {0x00BA, 0xA7},
        {0x00BF, 0xA8}, {0x00AE, 0xA9}, {0x00AC, 0xAA}, {0x00BD, 0xAB}, {0x00BC, 0xAC}, {0x00A1, 0xAD}, {0x00AB, 0xAE}, {0x00BB, 0xAF},
        {0x2591, 0xB0}, {0x2592, 0xB1}, {0x2593, 0xB2}, {0x2502, 0xB3}, {0x2524, 0xB4}, {0x00C1, 0xB5}, {0x00C2, 0xB6}, {0x00C0, 0xB7},
        {0x00A9, 0xB8}, {0x2563, 0xB9}, {0x2551, 0xBA}, {0x2557, 0xBB}, {0x255D, 0xBC}, {0x00A2, 0xBD}, {0x00A5, 0xBE}, {0x2510, 0xBF},
        {0x2514, 0xC0}, {0x2534, 0xC1}, {0x252C, 0xC2}, {0x251C, 0xC3}, {0x2500, 0xC4}, {0x253C, 0xC5}, {0x00E3, 0xC6}, {0x00C3, 0xC7},
        {0x255A, 0xC8}, {0x2554, 0xC9}, {0x2569, 0xCA}, {0x2566, 0xCB}, {0x2560, 0xCC}, {0x2550, 0xCD}, {0x256C, 0xCE}, {0x00A4, 0xCF},
        {0x00F0, 0xD0}, {0x00D0, 0xD1}, {0x00CA, 0xD2}, {0x00CB, 0xD3}, {0x00C8, 0xD4}, {0x0131, 0xD5}, {0x00CD, 0xD6}, {0x00CE, 0xD7},
        {0x00CF, 0xD8}, {0x2518, 0xD9}, {0x250C, 0xDA}, {0x2588, 0xDB}, {0x2584, 0xDC}, {0x00A6, 0xDD}, {0x00CC, 0xDE}, {0x2580, 0xDF},
        {0x00D3, 0xE0}, {0x00DF, 0xE1}, {0x00D4, 0xE2}, {0x00D2, 0xE3}, {0x00F5, 0xE4}, {0x00D5, 0xE5}, {0x00B5, 0xE6}, {0x00FE, 0xE7},
        {0x00DE, 0xE8}, {0x00DA, 0xE9}, {0x00DB, 0xEA}, {0x00D9, 0xEB}, {0x00FD, 0xEC}, {0x00DD, 0xED}, {0x00AF, 0xEE}, {0x00B4, 0xEF},
        {0x00AD, 0xF0}, {0x00B1, 0xF1}, {0x2017, 0xF2}, {0x00BE, 0xF3}, {0x00B6, 0xF4}, {0x00A7, 0xF5}, {0x00F7, 0xF6}, {0x00B8, 0xF7},
        {0x00B0, 0xF8}, {0x00A8, 0xF9}, {0x00B7, 0xFA}, {0x00B9, 0xFB}, {0x00B3, 0xFC}, {0x00B2, 0xFD}, {0x25A0, 0xFE}, {0x00A0, 0xFF}
    };

    const std::unordered_map<int32_t, char32_t> MAPPING_CP_1252 =
    {
                                                                                                                        /*   0x7F   */
        {0x20AC, 0x80}, /*   0x81   */  {0x201A, 0x82}, {0x0192, 0x83}, {0x201E, 0x84}, {0x2026, 0x85}, {0x2020, 0x86}, {0x2021, 0x87}, 
        {0x02C6, 0x88}, {0x2030, 0x89}, {0x0160, 0x8A}, {0x2039, 0x8B}, {0x0152, 0x8C}, /*   0x8D   */  {0x017D, 0x8E}, /*   0x8F   */
        /*   0x90   */  {0x2018, 0x91}, {0x2019, 0x92}, {0x201C, 0x93}, {0x201D, 0x94}, {0x2022, 0x95}, {0x2013, 0x96}, {0x2014, 0x97},
        {0x02DC, 0x98}, {0x2122, 0x99}, {0x0161, 0x9A}, {0x203A, 0x9B}, {0x0153, 0x9C}, /*   0x9D   */  {0x017E, 0x9E}, {0x0178, 0x9F},
        {0x00A0, 0xA0}, {0x00A1, 0xA1}, {0x00A2, 0xA2}, {0x00A3, 0xA3}, {0x00A4, 0xA4}, {0x00A5, 0xA5}, {0x00A6, 0xA6}, {0x00A7, 0xA7},
        {0x00A8, 0xA8}, {0x00A9, 0xA9}, {0x00AA, 0xAA}, {0x00AB, 0xAB}, {0x00AC, 0xAC}, {0x00AD, 0xAD}, {0x00AE, 0xAE}, {0x00AF, 0xAF},
        {0x00B0, 0xB0}, {0x00B1, 0xB1}, {0x00B2, 0xB2}, {0x00B3, 0xB3}, {0x00B4, 0xB4}, {0x00B5, 0xB5}, {0x00B6, 0xB6}, {0x00B7, 0xB7},
        {0x00B8, 0xB8}, {0x00B9, 0xB9}, {0x00BA, 0xBA}, {0x00BB, 0xBB}, {0x00BC, 0xBC}, {0x00BD, 0xBD}, {0x00BE, 0xBE}, {0x00BF, 0xBF},
        {0x00C0, 0xC0}, {0x00C1, 0xC1}, {0x00C2, 0xC2}, {0x00C3, 0xC3}, {0x00C4, 0xC4}, {0x00C5, 0xC5}, {0x00C6, 0xC6}, {0x00C7, 0xC7},
        {0x00C8, 0xC8}, {0x00C9, 0xC9}, {0x00CA, 0xCA}, {0x00CB, 0xCB}, {0x00CC, 0xCC}, {0x00CD, 0xCD}, {0x00CE, 0xCE}, {0x00CF, 0xCF},
        {0x00D0, 0xD0}, {0x00D1, 0xD1}, {0x00D2, 0xD2}, {0x00D3, 0xD3}, {0x00D4, 0xD4}, {0x00D5, 0xD5}, {0x00D6, 0xD6}, {0x00D7, 0xD7},
        {0x00D8, 0xD8}, {0x00D9, 0xD9}, {0x00DA, 0xDA}, {0x00DB, 0xDB}, {0x00DC, 0xDC}, {0x00DD, 0xDD}, {0x00DE, 0xDE}, {0x00DF, 0xDF},
        {0x00E0, 0xE0}, {0x00E1, 0xE1}, {0x00E2, 0xE2}, {0x00E3, 0xE3}, {0x00E4, 0xE4}, {0x00E5, 0xE5}, {0x00E6, 0xE6}, {0x00E7, 0xE7},
        {0x00E8, 0xE8}, {0x00E9, 0xE9}, {0x00EA, 0xEA}, {0x00EB, 0xEB}, {0x00EC, 0xEC}, {0x00ED, 0xED}, {0x00EE, 0xEE}, {0x00EF, 0xEF},
        {0x00F0, 0xF0}, {0x00F1, 0xF1}, {0x00F2, 0xF2}, {0x00F3, 0xF3}, {0x00F4, 0xF4}, {0x00F5, 0xF5}, {0x00F6, 0xF6}, {0x00F7, 0xF7},
        {0x00F8, 0xF8}, {0x00F9, 0xF9}, {0x00FA, 0xFA}, {0x00FB, 0xFB}, {0x00FC, 0xFC}, {0x00FD, 0xFD}, {0x00FE, 0xFE}, {0x00FF, 0xFF}
        
    };

    const std::unordered_map<int32_t, char32_t> MAPPED_ISO_8859_15 =
    {
                                                                                                                        /*   0x7F   */
        /*   0x80   */  /*   0x81   */  /*   0x82   */  /*   0x83   */  /*   0x84   */  /*   0x85   */  /*   0x85   */  /*   0x87   */
        /*   0x88   */  /*   0x89   */  /*   0x8A   */  /*   0x8B   */  /*   0x8C   */  /*   0x8D   */  /*   0x8E   */  /*   0x8F   */
        /*   0x90   */  /*   0x91   */  /*   0x92   */  /*   0x93   */  /*   0x94   */  /*   0x95   */  /*   0x95   */  /*   0x97   */
        /*   0x98   */  /*   0x99   */  /*   0x9A   */  /*   0x9B   */  /*   0x9C   */  /*   0x9D   */  /*   0x9E   */  /*   0x9F   */
        {0x00A0, 0xA0}, {0x00A1, 0xA1}, {0x00A2, 0xA2}, {0x00A3, 0xA3}, {0x20AC, 0xA4}, {0x00A5, 0xA5}, {0x0160, 0xA6}, {0x00A7, 0xA7},
        {0x0161, 0xA8}, {0x00A9, 0xA9}, {0x00AA, 0xAA}, {0x00AB, 0xAB}, {0x00AC, 0xAC}, {0x00AD, 0xAD}, {0x00AE, 0xAE}, {0x00AF, 0xAF},
        {0x00B0, 0xB0}, {0x00B1, 0xB1}, {0x00B2, 0xB2}, {0x00B3, 0xB3}, {0x017D, 0xB4}, {0x00B5, 0xB5}, {0x00B6, 0xB6}, {0x00B7, 0xB7},
        {0x017E, 0xB8}, {0x00B9, 0xB9}, {0x00BA, 0xBA}, {0x00BB, 0xBB}, {0x0152, 0xBC}, {0x0153, 0xBD}, {0x0178, 0xBE}, {0x00BF, 0xBF},
        {0x00C0, 0xC0}, {0x00C1, 0xC1}, {0x00C2, 0xC2}, {0x00C3, 0xC3}, {0x00C4, 0xC4}, {0x00C5, 0xC5}, {0x00C6, 0xC6}, {0x00C7, 0xC7},
        {0x00C8, 0xC8}, {0x00C9, 0xC9}, {0x00CA, 0xCA}, {0x00CB, 0xCB}, {0x00CC, 0xCC}, {0x00CD, 0xCD}, {0x00CE, 0xCE}, {0x00CF, 0xCF},
        {0x00D0, 0xD0}, {0x00D1, 0xD1}, {0x00D2, 0xD2}, {0x00D3, 0xD3}, {0x00D4, 0xD4}, {0x00D5, 0xD5}, {0x00D6, 0xD6}, {0x00D7, 0xD7},
        {0x00D8, 0xD8}, {0x00D9, 0xD9}, {0x00DA, 0xDA}, {0x00DB, 0xDB}, {0x00DC, 0xDC}, {0x00DD, 0xDD}, {0x00DE, 0xDE}, {0x00DF, 0xDF},
        {0x00E0, 0xE0}, {0x00E1, 0xE1}, {0x00E2, 0xE2}, {0x00E3, 0xE3}, {0x00E4, 0xE4}, {0x00E5, 0xE5}, {0x00E6, 0xE6}, {0x00E7, 0xE7},
        {0x00E8, 0xE8}, {0x00E9, 0xE9}, {0x00EA, 0xEA}, {0x00EB, 0xEB}, {0x00EC, 0xEC}, {0x00ED, 0xED}, {0x00EE, 0xEE}, {0x00EF, 0xEF},
        {0x00F0, 0xF0}, {0x00F1, 0xF1}, {0x00F2, 0xF2}, {0x00F3, 0xF3}, {0x00F4, 0xF4}, {0x00F5, 0xF5}, {0x00F6, 0xF6}, {0x00F7, 0xF7},
        {0x00F8, 0xF8}, {0x00F9, 0xF9}, {0x00FA, 0xFA}, {0x00FB, 0xFB}, {0x00FC, 0xFC}, {0x00FD, 0xFD}, {0x00FE, 0xFE}, {0x00FF, 0xFF}
    };
}
